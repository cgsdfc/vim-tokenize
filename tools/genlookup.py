'''
Generate the lookup table from ``iconv --list`` filtered by ``codecs.lookup()``
so that tokenize() can use conversions compatible to python
'''

import codecs
from pprint import pprint as pp

__version__ = '0.0.2'

def call_iconv_list():
    '''
    Invoke iconv if available, return the encoding names in a list
    '''
    import sys
    import subprocess
    try:
        res = subprocess.check_output(['iconv', '--list'])
    except FileNotFoundError:
        sys.stderr.write('iconv not available\n')
    except subprocess.CalledProcessError:
        sys.stderr.write('Error happened when calling iconv\n')
    else:
        return [s.strip('/') for s in res.decode().split()]

def proccess_ilist(il):
    '''
    Process raw ilist
    '''
    return sorted(list(filter(codecs_support, il)))

def codecs_support(enc):
    '''
    True if supported by codecs
    '''
    try:
        codecs.lookup(enc)
    except LookupError:
        return False
    else:
        return True

def dump_vim_dict(ilist, out):
    '''
    Write the appropriate ilist to out (out should be tokenize/lookup.vim)
    '''
    out.write('" Generated by genlookup.py (version %s); Do not edit.\n\n' % __version__)
    out.write('let tokenize#lookup#Table = {\n')
    for name in ilist:
        out.write('  \\ %r: 1,\n' % name)
    out.write('  \\}\n')

def main():
    import argparse
    parser = argparse.ArgumentParser(description='Generate lookup table from iconv --list')
    parser.add_argument('output',
            type=argparse.FileType('w'), help='output file path')
    args = parser.parse_args()
    il = call_iconv_list()
    il = proccess_ilist(il)
    with args.output as out:
        return dump_vim_dict(il, out)


if __name__ == '__main__':
    main()
