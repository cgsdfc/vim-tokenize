import re
import token
from operator import itemgetter

class TokenGen:
    AU_PATH=re.compile(r'.*/autoload/(.*)\.vim')

    def __init__(self, path):
        self.path=path
        self.ns=self.make_ns(path)
        self.tok_name=token.tok_name
        self.token_list=[(name,val) for val,name in sorted(token.tok_name.items())]
        print(self.ns)

    def make_ns(self, path):
        '''Return the autoload namespace given ``path``.
        autoload/tokenize/token.vim -> tokenize#token
        '''
        mat=self.AU_PATH.match(path)
        return mat.group(1).replace('/', '#')

    def gen(self):
        with open(self.path, 'w') as out:
            out.write('" Generated by gentokens.py. Do not edit\n')
            out.write(f'let {self.ns}#token={{}}\n')
            for name,val in self.token_list:
                out.write(f'let {self.ns}#token.{name}={val}\n')


def main():
    import argparse
    p = argparse.ArgumentParser()
    p.add_argument('path', nargs=1, type=str, help='path to the generated token file')
    args = p.parse_args()
    return TokenGen(args.path[0]).gen()

if __name__ == '__main__':
    main()
