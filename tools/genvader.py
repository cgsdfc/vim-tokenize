'''
Generate a vader file to test tokenize().
'''

import os
__version__ = '0.0.1'

TEMPLATE = '''
Assert tokenize#test#against({filename!r})\n
'''

def glob_pyfiles(dir):
    for dirpath,_,filenames in os.walk(dir):
        for filename in filenames:
            if filename.endswith('py'):
                yield os.path.join(dirpath, filename)

def make(dir, output):
    count=0
    with output as f:
        f.write('" Generated by genvader.py (%s). Do not edit!\n\n' % __version__)
        for filename in glob_pyfiles(dir):
            f.write('Execute(#%04d);\n' % count)
            count += 1
            f.write(TEMPLATE.lstrip().format(filename=filename))

def main():
    import argparse
    import sys

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-V', '--version', action='version',
            version='%(prog)s {version}'.format(version=__version__))
    parser.add_argument('dir', type=str,
            help='Directory to look for python files')
    parser.add_argument('-o', '--output', dest='output', default=sys.stdout,
            type=argparse.FileType('w'), help='Output file')
    args = parser.parse_args()
    return make(os.path.abspath(args.dir), args.output)

if __name__ == '__main__':
    main()
